# Parameters for point cloud conversion node
# it converts a sensor_msgs/PointCloud2 to a rmcl_msgs/ScanStamped
rmcl_lidar3d_conversion:
  ros__parameters:
    auto_detect_range: false
    auto_detect_phi: false
    auto_detect_theta: false
    auto_detect_width_height: false
    debug_cloud: true
    model:
      range_min: 0.5
      range_max: 75.0
      phi_min: -0.2617993877991494
      phi_inc:  0.03490658503988659
      phi_n: 16
      theta_min: -3.14159011841
      theta_inc: 0.01431249500496489 # 2 pi / 439 (not 440 otherwise we would get two points on origin)
      theta_n: 440

# Parameters for the MICP-L node
rmcl_micpl:
  ros__parameters:

    # required frames
    base_frame: base_footprint
    map_frame: map
    odom_frame: odom

    # maximum number of correction steps per second
    # lower this to decrease the correction speed but save energy 
    disable_correction: False
    correction_rate_max: 20.0
    optimization_iterations: 5
    tf_time_source: 1 # 0: measurement_latest, 1: correction_latest
    tf_rate: 100.0
    broadcast_tf: True
    publish_pose: True
    pose_noise: 0.01 # minimum noise of pose. can be set from sensor noise

    # adjust max distance dependent of the state of localization
    adaptive_max_dist: True # enable adaptive max dist

    # initial offset applied to every incoming pose guess
    pose_guess_offset: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0] # translation + euler angles (6) or translation + quaternion (7)

    # very first initial pose guess
    initial_pose_guess: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0] # translation + euler angles (6) or translation + quaternion (7)

    # describe your sensor setup here
    sensors: # list of range sensors - at least one is required
      lidar3d:
        data_source: topic
        model_type: spherical
        topic_name: /rmcl_inputs/lidar3d
        correspondences:
          backend: optix
          type: RC
          metric: P2L
          adaptive_max_dist_min: 0.5
          max_dist: 2.0
          visualize: True
